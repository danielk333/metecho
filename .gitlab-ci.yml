# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.8.10

stages:
  - test
  - release
  - deploy

variables:
  #Change pip's cache directory to be inside 
  # the project directory since we can
  # only cache local items.
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  #Use a gitlab variable to securly store the 
  # user token used to upload to PyPI
  PYPI_TOKEN: $PYPI_TOKEN



#Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .cache/pip
    - .venv

# #
# Template information: 
#   https://docs.gitlab.com/ee/ci/yaml/yaml_specific_features.html
# #

#Template script for all jobs that installs
# the package and dependancies into a virtualenv
.install-deps-template: &install-deps
  # Print version for debug
  - python -V
  # Prepare and activate virtualenv
  - pip install virtualenv
  - pip install -U pip
  - virtualenv venv
  - source venv/bin/activate
  # install the develop dependancies
  - pip install .[develop]
  #install extras dependancies
  - apt update
  - apt install -y openmpi-bin libopenmpi3 libopenmpi-dev openmpi-bin openmpi-doc
  #install extras
  - pip install .[all]


default:
  tags:
    - IRF
  before_script:
    - *install-deps # execute script in alias


#Template for testing on python images, 
# extend this for each python-platform 
# the package is intended to work on
.py-test-template: &python-test
  stage: test
  allow_failure: true
  script: 
    - pytest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"


# Run all diagnostics
diagnostics:
  stage: test
  script: 
    - coverage run -m pytest > pytest_report
    - coverage report -m > coverage_report
    - python -m flake8 --extend-exclude venv pyorb > flake8_report
    - radon cc -a pyorb/ > radon_cc_report
    - radon raw -s pyorb/ > radon_raw_report
    - radon mi -s pyorb/ > radon_mi_report
    - radon hal pyorb/ > radon_hal_report
  allow_failure: true
  artifacts:
    paths:
      - "*_report"
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG


##########################
## Platforms to test on ##
#
# 
#Official language images, look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
# And use the `python-test` alias
# 
#To test on OS distributions, find the OS images, e.g:
# https://hub.docker.com/_/ubuntu
# and use the `os-test` alias to allow for specific 
# os-dependancy setup (e.g. gcc or gfortran) before 
# install of the pacakge trough `before_script`
# 

# python3.7:
#   <<: *python-test # Merge the contents of the alias
#   image: python:3.7

# python3.9:
#   <<: *python-test # Merge the contents of the alias
#   image: python:3.9


#Build and check integrity of distribution
package:
  stage: release
  script:
    - python -m build
    - python -m twine check dist/*
  artifacts:
    paths:
      - dist/*
  # rules:
  #   - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG

#Compile documentation for publication
pages:
  stage: deploy
  script:
    - cd docs
    - make html
    - mv build ../public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG

#Publish package on local PyPI if
# the commit has a version tag
upload:
  stage: deploy
  script:
    - >
      TWINE_USERNAME=gitlab-ci-token
      TWINE_PASSWORD=$CI_JOB_TOKEN
      python -m twine upload
      --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
      dist/*
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG
